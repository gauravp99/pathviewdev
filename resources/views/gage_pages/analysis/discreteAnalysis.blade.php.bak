@extends('GageApp')
@section('content')
    @include('GageNavigation')

    <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular.js"></script>
    <script src="js/app.js"></script>
    <script src="js/gageAnalysis.js"></script>
    <script src="js/app.js"></script>
    <script src="js/jquery.validate.min.js"></script>
    <script src="http://jqueryvalidation.org/files/dist/additional-methods.min.js"></script>
    <link href="{{ asset('/css/bootstrap-switch.min.css') }}" rel="stylesheet">
    <script src="{{ asset('/js/bootstrap-switch.min.js') }}"></script>
    <div class="col-md-9">
        <div class="conetent-header ">
            <p><b>Discrete GAGE Analysis</b></p>
        </div>
        <div id="error-message"></div>
    </div>
    <?php
    //specifying default values for all the variables;
    $geneIdType = "entrez";
    $species = "hsa-Homosapiens-human";
    $reference = "1,3";
    $sample = "2,4";
    $cutoff = "0.1";
    $ncutoff = "1";
    $setSizeMin = "10";
    $setSizeMax = "infinite";
    $compare = "paired";
    $test2d = false;
    $rankTest = false;
    $useFold = true;
    $test = "gs.tTest";
    $dopathview = false;
    $dataType = "gene";
    $normalizedData = false;
    $countData = false;
    $logTransformed = false;
    $bins = 3;
    ?>
    <input type="text" id="rememberTxt" hidden="">

    <div class="col-md-7">

        <div id="content">
            <div id="wrapper" ng-app="GageApp" ng-controller="ExampleAnalysisController1">
                <div id="navigation" style="display:none;">
                    <ul>
                        <li class="selected">
                            <a href="#">Input / Output</a>
                        </li>
                        <li>
                            <a href="#">Analysis</a>
                        </li>
                        <li id="graphics">
                            <a id="graphicsA" href="#" style="display: block;margin: 0px 0;"> <span><p>Pathview</p> <p
                                            style="margin-top: -35px;">Graphics</p></span></a>
                        </li>
                        <li id="coloration">
                            <a href="#" style="display: block;margin: 0px 0;"> <span><p>Pathview</p> <p
                                            style="margin-top: -35px;">Coloration</p></span> </a>
                        </li>
                    </ul>
                </div>
                <div id="steps">
                    {!! form::open(array('url' => 'discreteGageAnalysis','method'=>'POST','files'=>true,'id' => 'gage_anal_form','name'=>'gage_anal_form')) !!}
                    <fieldset class="step inputOutput-step">
                        <div class="stepsdiv" id="SampleListData-div">
                            <div class="col-sm-12">

                                <div class="col-sm-5">
                                    <a href="gageTutorial#sampleList"
                                       onclick="window.open('gageTutorial#assay_data', 'newwindow', 'width=300, height=250').focus() ;return false;"
                                       title="Input data containing an expression matrix or matrix-like data structure, with genes as rows and samples as columns. Accepts only CSV and TXT as extension."
                                       target="_blank" class="scrollToTop" style="float:left;margin-right:5px;">
                                        <span class="glyphicon glyphicon-info-sign" style="margin-right: 20px;"></span>
                                    </a>
                                    <label for="assayData">Sample List:</label>
                                </div>

                                <div class="col-sm-7">


                                    <div class="input-group">
                                        <span style="color:red"
                                              ng-show="userForm.files.$dirty && userForm.files.$invalid"></span>
                                        <textarea class="form-control valid" id="sampleList" rows="4" name="sampleList"
                                                  aria-invalid="false"></textarea>
                                        <label for="sampleList">(Or)</label>
                                        <input type="file" id="sampleListInputFile" name="sampleListInputFile">
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="stepsdiv" id="BackgroundData-div">
                            <div class="col-sm-12">

                                <div class="col-sm-5">
                                    <a href="gageTutorial#sampleList"
                                       onclick="window.open('gageTutorial#assay_data', 'newwindow', 'width=300, height=250').focus() ;return false;"
                                       title="Input data containing an expression matrix or matrix-like data structure, with genes as rows and samples as columns. Accepts only CSV and TXT as extension."
                                       target="_blank" class="scrollToTop" style="float:left;margin-right:5px;">
                                        <span class="glyphicon glyphicon-info-sign" style="margin-right: 20px;"></span>
                                    </a>
                                    <label for="assayData">Background List:</label>
                                </div>

                                <div class="col-sm-7">

                                    <textarea class="form-control valid" rows="4" id="backgroundList"
                                              name="backgroundList" aria-invalid="false"></textarea>
                                    <label for="sampleList">(Or)</label>

                                    <div class="input-group">
                                        <span style="color:red"
                                              ng-show="userForm.files.$dirty && userForm.files.$invalid"></span>
                                        <input type="file" id="backgroundListInputFile" name="backgroundListInputFile">
                                    </div>
                                </div>
                            </div>
                        </div>
                        @include('gageAnalysis')
    <script>
        $(document).ready(function () {


        });


        $('#submit-button').click(function () {
            console.log($('#geneSet').val());
            if(($('#geneSet').val()[0]==='custom') && (!$('#backgroundList').val()&& !$('#backgroundListFile').val()))
            {
                var r = confirm("Note: You will need background list gene id's to enrich the results for custom gene id sets!");
                return !r;
            }
            //$('#progress').show();
            $('#completed').hide();
        });
        $('#geneIdFile').hide();
        $(document).on('change', '.btn-file :file', function () {
            var input = $(this),
                    numFiles = input.get(0).files ? input.get(0).files.length : 1,
                    label = input.val().replace(/\\/g, '/').replace(/.*\//, '');
            input.trigger('fileselect', [numFiles, label]);
        });

        $(document).ready(function () {
            $('.btn-file :file').on('fileselect', function (event, numFiles, label) {

                var input = $(this).parents('.input-group').find(':text'),
                        log = numFiles > 1 ? numFiles + ' files selected' : label;

                if (input.length) {
                    input.val(log);
                } else {
                    if (log) alert(log);
                }

            });
        });
        var goSpecIdBind = {
            "Anopheles": "eg",
            "Arabidopsis": "tair",
            "Bovine": "eg",
            "Worm": "eg",
            "Canine": "eg",
            "Fly": "eg",
            "Zebrafish": "eg",
            "E coli strain K12": "eg",
            "E coli strain Sakai": "eg",
            "Chicken": "eg",
            "Human": "eg",
            "Mo use": "eg",
            "Rhesus": "eg",
            "Malaria": "orf",
            "Chimp": "eg",
            "Rat": "eg",
            "Yeast": "orf",
            "Pig": "eg",
            "Xenopus": "eg"
        };

        //saved species to be used in javascript
        var speciesArray = <?php echo JSON_encode($species);?> ;
                <?php
                $goSpecies = DB::table('species')
                        ->join('GoSpecies', 'species.species_id', '=', 'GoSpecies.species_id')
                        ->select('GoSpecies.species_id','species.species_desc','GoSpecies.Go_name','GoSpecies.id_type')->get();
                $GageSpeciesGeneIDMAtch = DB::table('GageSpeceisGeneIdMatch')
                                            ->select('species_id','geneid')->get();
                ?>
                var goSpeciesArray = <?php echo JSON_encode($goSpecies);?>;
        var GageSpeciesGeneIDMAtch = <?php echo JSON_encode($GageSpeciesGeneIDMAtch);?>;
                <?php
                $species_disesae = DB::table('species')->where('disease_index_exist','N')->get();?>
                var speciesdiseaseArray = <?php echo JSON_encode($species_disesae);?> ;
        $('#gage_anal_form').validate({

            invalidHandler: function (form, validator) {
                var errors = validator.numberOfInvalids();

                if (errors > 0) {
                    $('#progress').hide();
                    $("#error-message").show().text("** You missed " + errors + " field(s) or errors check and fill it to proceed.");
                    $("");
                } else {
                    $("#error-message").hide();
                }
            },
            rules: {
                sampleListInputFile: {
                    extension: "txt|csv",
                    required: {

                        depends: function (element) {
                            return $("#sampleList").val() == ""
                        }
                    }
                },
                sampleList: {
                    required: {
                        depends: function (element) {
                            return $("#sampleListInputFile").val() == ""
                        }
                    }
                },
                /*backgroundListInputFile: {
                    extension: "txt|csv",
                    required: {

                        depends: function (element) {
                            return $("#backgroundList").val() == ""

                        }
                    }
                },
                backgroundList: {
                    required: {
                        depends: function (element) {
                            return $("#backgroundListInputFile").val() == ""

                        }
                    }
                },*/
                'geneSet[]': "required",


                cutoff: {
                    required: true,
                    decimal: true
                },
                ncutoff: {
                    required: true,
                    decimal: true
                },
                geneIdFile: {
                    required: true
                },
                species: {
                    required: true,
                    speciesValid: true
                },
                compare: {
                    refSapleColumnLengthCheck: true
                }
            },
            messages: {
                sampleListInputFile: {
                    required: "* Required Input sample list. Manually type it or upload a file",
                    extension: "* only txt and csv extensions are allowed"
                },
                backgroundListInputFile: {
                    required: "* Required Input Background list. Manually type it or upload a file",
                    extension: "* only txt and csv extensions are allowed"
                },
                sampleList: {
                    required: "* Required Input sample list. Manually type it or upload a file",

                },
                backgroundList: {
                    required: "* Required Input Background list. Manually type it or upload a file",

                },
                geneIdFile: {
                    required: "* Select the Gene ID file csv/txt file"
                },
                'geneSet[]': "* At least one GeneSet Field option should be selected",
                reference: {
                    required: "* Reference columns should be specified",
                    refSampleFieldValidate: "* Input field should be Column numbers of input file separated by comma or NULL",
                    refSampleSameColumnCheck: "* column numbers should not intersect with each other"
                },
                samples: {
                    required: "* Sample columns should be specified",
                    refSampleFieldValidate: "* Input field should be Column numbers of input file separated by comma or NULL",
                    refSampleSameColumnCheck: "* column numbers should not intersect with each other"
                },

                cutoff: {
                    required: "* Cutoff field value is required",
                    decimal: "* Cutoff field must be decimal value"
                },
                ncutoff: {
                    required: "* nCutoff field value is required",
                    decimal: "* nCutoff field must be decimal value"
                },
                species: {
                    required: "* Species field value is required",
                    speciesValid: "* Entered speceis is not a valid species"
                },
                compare: {
                    refSapleColumnLengthCheck: "* Since Reference and Sample columns lengths are not equal select value to be unpaired "
                }
            }/*,
             submitHandler: function(form) {
             var fd = new FormData(document.querySelector("form"));
             $.ajax({
             url:$('#gage_anal_form').attr('action'),
             type:$('#gage_anal_form').attr('method'),
             data: fd,
             success: function(data){
             $("#resultLink").attr("href", "/gageResult?analysis_id="+data);

             hideProgress();
             showDoneResultMessage();
             },

             contentType: false,
             processData: false

             });
             }
             */
        });
        function showDoneResultMessage() {
            console.log("in show done result message");
            $('#completed').show();
        }
        function hideProgress() {
            console.log("in show done progress hide");
            $('#progress').hide();

        }


        jQuery.validator.addMethod('refSampleFieldValidate', function (value, element) {
            if (value.toLowerCase() === "null" || value.toLowerCase() === "") {
                return true;
            }
            else {
                return /^\d(\d?\,?\d+)*/.test(value);
            }
        }, "Input field should be Column numbers of input file separated by comma");
        jQuery.validator.addMethod('decimal', function (value, element) {
            return /^\d(\d?\.?\d+)*/.test(value);
        }, "Cut off value should be a decimal value");
        jQuery.validator.addMethod('setSize', function (value, element) {
            if (value.toLowerCase() === 'infinite' || $.isNumeric(value)) {
                return true;
            }
            else {
                return false;
            }
        }, "setSize Value should be neumeric or INF");
        jQuery.validator.addMethod('speciesValid', function (value, element) {
            var validSpeciesFlag = false;

            if ($('#geneIdType > option').length == 1) {
                if ($('#geneIdType > option')[0].text === 'custom') {
                    if (value.split('-')[0].toLowerCase() === 'custom') {
                        return true;
                    }
                    else {
                        return false;
                    }
                }
            }
            if ($('#geneSet').val() !== null) {
                if ($('#geneSet').val()[0] === 'BP' || $('#geneSet').val()[0] === 'CC' || $('#geneSet').val()[0] === 'MF' || $('#geneSet').val()[0] === 'BP,CC,MF') {
                    $.each(goSpecIdBind, function (key1, value1) {
                        if (key1.toLowerCase() === value.toLowerCase()) {
                            validSpeciesFlag = true;
                            return false;
                        }
                    });
                }
            }
            if (value.split('-')[0].toLowerCase() == "custom") {
                validSpeciesFlag = true;
            }
            else {
                $.each(speciesArray, function (speciesIter, specieValue) {

                    if (specieValue['species_id'] === value.split('-')[0] || (value.length == 3 && specieValue['species_id'] === value )) {
                        validSpeciesFlag = true;
                        return false;
                    }
                });

            }

            $.each(goSpeciesArray, function (index, xyz) {
                if (goSpeciesArray[index]['species_id'].toLowerCase() === value.substr(0, 3).toLowerCase()) {
                    validSpeciesFlag = true;
                    return false;
                }
            });


            return validSpeciesFlag;

        }, "Entered Speceis is not a valid speceis");

        //jquery validation method to check if number of columns specified in  reference is always
        //equal to sample columns

        jQuery.validator.addMethod("refSapleColumnLengthCheck", function (value, element) {
            $refArray = $('#reference').val().replace(/\,/g, " ").trim().split(" ");
            $sampleArray = $('#sample').val().replace(/\,/g, " ").trim().split(" ");

            if ($refArray.length != $sampleArray.length && ($('#compare').val() === 'paired')) {
                return false
            } else {
                return true;
            }
        }, "Since Reference and Sample columns lengths are not equal select the argument 'compare' to be unpaired");
        jQuery.validator.addMethod("refSampleSameColumnCheck", function (value, element) {


            $refArray = $('#reference').val().replace(/\,/g, " ").trim().split(" ");
            $sampleArray = $('#sample').val().replace(/\,/g, " ").trim().split(" ");


            function containsAny(array1, array2) {
                for (var i = 0; i < array1.length; i++) {
                    for (var j = 0; j < array2.length; j++) {
                        if (array1[i] == array2[j]) return true;
                    }
                }
                return false;
            }

            if (containsAny($refArray, $sampleArray)) {
                if (($refArray[0] == "" && $sampleArray[0] == "")) {
                    return true;
                }
                else {
                    return false;
                }
            }
            else {
                return true;
            }

        }, "Column numbers should not intersect with each other");


    </script>



@stop
